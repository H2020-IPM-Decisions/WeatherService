{
	"info": {
		"_postman_id": "3febfc92-66df-4e6f-9626-609621038503",
		"name": "IPM Decisions Weather API tests",
		"description": "This is the test suite for the IPM Decisions Weather API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "MetaDataService",
			"item": [
				{
					"name": "Get parameter list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"First value has id=1001\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(1001);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{wx_url}}/rest/parameter",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"parameter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get QC type list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"The set of ids follows the bitmap pattern\", function () {",
									"    var jsonData = pm.response.json();",
									"    for(var i=0;i<jsonData.length;i++)",
									"    {",
									"        if(i==0)",
									"        {",
									"            pm.expect(jsonData[i].id).to.eql(0)",
									"        }",
									"        else",
									"        {",
									"            pm.expect(jsonData[i].id).to.eql(Math.pow(2,i-1));",
									"        }",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{wx_url}}/rest/qc",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"qc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get weather data schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response is a Json Schema\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"$schema\"]).to.eql(\"http://json-schema.org/draft-04/schema#\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{wx_url}}/rest/schema/weatherdata",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"schema",
								"weatherdata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schema validate weather data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The data has been validated\",function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"isValid\"]).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"timeStart\":\"2020-10-02T08:00:00Z\",\"timeEnd\":\"2020-10-11T06:00:00Z\",\"interval\":3600,\"weatherParameters\":[1001,3001,2001,4002],\"locationWeatherData\":[{\"longitude\":14.3711,\"latitude\":67.2828,\"altitude\":70.0,\"data\":[[13.5,71.7,0.0,6.5],[14.1,70.5,0.0,7.5],[14.7,69.7,0.0,7.3],[15.3,69.2,0.0,6.6],[15.6,68.3,0.0,6.9],[15.3,68.2,0.0,7.2],[15.0,68.6,0.0,7.0],[14.3,69.5,0.0,7.0],[13.5,69.4,0.0,7.1],[12.8,67.8,0.0,7.1],[12.4,66.8,0.0,7.6],[12.1,66.7,0.0,8.6],[11.8,67.6,0.0,8.7],[11.7,68.1,0.0,8.4],[11.5,68.2,0.0,7.4],[11.4,67.8,0.0,7.5],[11.2,67.9,0.0,8.4],[11.0,67.9,0.0,8.4],[10.9,67.2,0.0,7.9],[10.7,66.8,0.0,7.0],[10.6,66.4,0.0,6.7],[10.5,66.7,0.0,6.8],[10.5,67.6,0.0,6.4],[10.9,68.9,0.0,6.3],[11.7,69.5,0.0,6.5],[12.6,69.8,0.0,6.8],[13.3,69.5,0.0,7.4],[13.8,69.8,0.0,7.2],[14.0,69.2,0.0,7.1],[13.9,69.6,0.0,7.3],[13.6,70.5,0.0,7.2],[13.1,70.7,0.0,7.4],[12.4,70.3,0.0,6.9],[11.8,69.5,0.0,7.1],[11.4,68.7,0.0,7.3],[11.1,67.9,0.0,7.4],[10.9,67.1,0.0,7.3],[10.8,66.5,0.0,7.4],[10.7,65.9,0.0,8.0],[10.7,65.3,0.0,9.2],[10.5,65.1,0.0,9.7],[10.4,65.3,0.0,10.1],[10.1,66.1,0.0,10.7],[9.9,66.4,0.0,10.3],[9.9,66.0,0.0,10.2],[9.9,66.5,0.0,10.1],[9.9,68.5,0.0,10.6],[10.4,70.7,0.0,11.3],[11.0,71.3,0.0,11.6],[11.8,71.5,0.0,11.0],[12.5,71.5,0.0,10.9],[13.1,71.5,0.0,10.9],[13.4,71.4,0.0,10.7],[13.083333333333334,72.0,0.0,10.083333333333332],[12.766666666666667,72.60000000000001,0.0,9.466666666666667],[12.45,73.2,0.0,8.85],[12.133333333333333,73.8,0.0,8.233333333333333],[11.816666666666666,74.4,0.0,7.616666666666666],[11.5,75.0,0.0,7.0],[11.383333333333333,75.08333333333333,0.0,6.966666666666667],[11.266666666666667,75.16666666666667,0.0,6.933333333333334],[11.15,75.25,0.0,6.9],[11.033333333333333,75.33333333333333,0.0,6.866666666666666],[10.916666666666668,75.41666666666667,0.0,6.833333333333333],[10.8,75.5,0.0,6.8],[10.783333333333333,75.48333333333333,0.0,6.816666666666666],[10.766666666666667,75.46666666666667,0.0,6.833333333333333],[10.75,75.45,0.0,6.85],[10.733333333333333,75.43333333333334,0.0,6.866666666666667],[10.716666666666667,75.41666666666667,0.0,6.883333333333334],[10.7,75.4,0.0,6.9],[11.25,74.48333333333333,0.0,6.716666666666667],[11.799999999999999,73.56666666666668,0.0,6.533333333333333],[12.35,72.65,0.0,6.35],[12.9,71.73333333333333,0.0,6.166666666666667],[13.45,70.81666666666668,0.0,5.983333333333333],[14.0,69.9,0.0,5.8],[13.583333333333334,70.68333333333334,0.0,5.7],[13.166666666666666,71.46666666666667,0.0,5.6],[12.75,72.25,0.0,5.5],[12.333333333333334,73.03333333333333,0.0,5.4],[11.916666666666666,73.81666666666666,0.0,5.3],[11.5,74.6,0.0,5.2],[11.45,74.64999999999999,0.0,5.25],[11.4,74.7,0.0,5.3],[11.35,74.75,0.0,5.35],[11.299999999999999,74.8,0.0,5.4],[11.25,74.85000000000001,0.0,5.45],[11.2,74.9,0.0,5.5],[11.2,74.9,0.0,5.616666666666667],[11.2,74.9,0.0,5.733333333333333],[11.2,74.9,0.0,5.85],[11.2,74.9,0.0,5.966666666666667],[11.2,74.9,0.0,6.083333333333334],[11.2,74.9,0.0,6.2],[11.583333333333332,74.11666666666667,0.0,6.2],[11.966666666666667,73.33333333333334,0.0,6.2],[12.35,72.55000000000001,0.0,6.2],[12.733333333333333,71.76666666666667,0.0,6.2],[13.116666666666667,70.98333333333333,0.0,6.2],[13.5,70.2,0.0,6.2],[13.183333333333334,70.28333333333333,0.0,6.25],[12.866666666666667,70.36666666666667,0.0,6.3],[12.55,70.45,0.0,6.35],[12.233333333333333,70.53333333333333,0.0,6.4],[11.916666666666666,70.61666666666667,0.0,6.45],[11.6,70.7,0.0,6.5],[11.483333333333333,70.8,0.0,6.6],[11.366666666666667,70.9,0.0,6.7],[11.25,71.0,0.0,6.8],[11.133333333333333,71.1,0.0,6.8999999999999995],[11.016666666666667,71.2,0.0,7.0],[10.9,71.3,0.0,7.1],[10.9,71.45,0.0,7.266666666666667],[10.9,71.6,0.0,7.433333333333333],[10.9,71.75,0.0,7.6],[10.9,71.9,0.0,7.766666666666667],[10.9,72.05,0.0,7.933333333333333],[10.9,72.2,0.0,8.1],[11.216666666666667,71.61666666666667,0.0,7.949999999999999],[11.533333333333333,71.03333333333333,0.0,7.8],[11.850000000000001,70.45,0.0,7.65],[12.166666666666668,69.86666666666667,0.0,7.5],[12.483333333333334,69.28333333333333,0.0,7.35],[12.8,68.7,0.0,7.2],[12.55,69.11666666666667,0.0,7.1],[12.3,69.53333333333333,0.0,7.0],[12.05,69.95,0.0,6.9],[11.8,70.36666666666667,0.0,6.8],[11.55,70.78333333333333,0.0,6.699999999999999],[11.3,71.2,0.0,6.6],[11.200000000000001,71.5,0.0,6.583333333333333],[11.1,71.8,0.0,6.566666666666666],[11.0,72.1,0.0,6.55],[10.9,72.4,0.0,6.533333333333333],[10.799999999999999,72.7,0.0,6.516666666666667],[10.7,73.0,0.0,6.5],[10.75,72.95,0.0,6.616666666666667],[10.799999999999999,72.9,0.0,6.733333333333333],[10.85,72.85,0.0,6.85],[10.9,72.8,0.0,6.966666666666667],[10.95,72.75,0.0,7.083333333333334],[11.0,72.7,0.0,7.2],[11.366666666666667,72.38333333333334,0.0,6.866666666666667],[11.733333333333333,72.06666666666666,0.0,6.533333333333333],[12.1,71.75,0.0,6.2],[12.466666666666667,71.43333333333334,0.0,5.866666666666667],[12.833333333333332,71.11666666666666,0.0,5.533333333333333],[13.2,70.8,0.0,5.2],[12.833333333333332,71.6,0.0,5.066666666666666],[12.466666666666667,72.39999999999999,0.0,4.933333333333334],[12.1,73.19999999999999,0.0,4.800000000000001],[11.733333333333333,74.0,0.0,4.666666666666667],[11.366666666666667,74.8,0.0,4.533333333333333],[11.0,75.6,0.0,4.4],[10.816666666666666,76.33333333333333,0.0,4.483333333333333],[10.633333333333333,77.06666666666666,0.0,4.566666666666667],[10.45,77.8,0.0,4.65],[10.266666666666667,78.53333333333333,0.0,4.733333333333333],[10.083333333333334,79.26666666666667,0.0,4.816666666666667],[9.9,80.0,0.0,4.9],[9.833333333333334,80.06666666666666,0.0,4.883333333333334],[9.766666666666667,80.13333333333334,0.0,4.866666666666667],[9.7,80.2,0.0,4.85],[9.633333333333333,80.26666666666667,0.0,4.833333333333333],[9.566666666666666,80.33333333333334,0.0,4.816666666666666],[9.5,80.4,0.0,4.8],[9.966666666666667,79.56666666666668,0.0,4.583333333333333],[10.433333333333334,78.73333333333333,0.0,4.366666666666666],[10.9,77.9,0.0,4.15],[11.366666666666667,77.06666666666668,0.0,3.933333333333333],[11.833333333333334,76.23333333333333,0.0,3.716666666666667],[12.3,75.4,0.0,3.5],[12.0,76.33333333333334,0.0,3.4333333333333336],[11.700000000000001,77.26666666666667,0.0,3.3666666666666667],[11.4,78.2,0.0,3.3],[11.1,79.13333333333334,0.0,3.2333333333333334],[10.8,80.06666666666666,0.0,3.166666666666667],[10.5,81.0,0.0,3.1],[10.166666666666666,81.8,0.0,3.1333333333333333],[9.833333333333334,82.6,0.0,3.1666666666666665],[9.5,83.4,0.0,3.2],[9.166666666666666,84.2,0.0,3.2333333333333334],[8.833333333333334,85.0,0.0,3.2666666666666666],[8.5,85.8,0.0,3.3],[8.55,85.9,0.0,3.3833333333333333],[8.6,86.0,0.0,3.4666666666666663],[8.65,86.1,0.0,3.55],[8.700000000000001,86.2,0.0,3.6333333333333333],[8.75,86.30000000000001,0.0,3.7166666666666663],[8.8,86.4,0.0,3.8],[9.283333333333333,85.10000000000001,0.0,3.583333333333333],[9.766666666666667,83.8,0.0,3.3666666666666667],[10.25,82.5,0.0,3.15],[10.733333333333333,81.2,0.0,2.933333333333333],[11.216666666666667,79.89999999999999,0.0,2.716666666666667],[11.7,78.6,0.0,2.5],[11.366666666666665,80.11666666666666,0.0,2.45],[11.033333333333333,81.63333333333333,0.0,2.4],[10.7,83.15,0.0,2.35],[10.366666666666665,84.66666666666667,0.0,2.3000000000000003],[10.033333333333333,86.18333333333334,0.0,2.25],[9.7,87.7,0.0,2.2],[9.416666666666666,88.0,0.0,2.216666666666667],[9.133333333333333,88.3,0.0,2.2333333333333334],[8.85,88.6,0.0,2.25],[8.566666666666666,88.9,0.0,2.2666666666666666],[8.283333333333333,89.2,0.0,2.283333333333333],[8.0,89.5,0.0,2.3],[8.05,89.45,0.0,2.3166666666666664],[8.1,89.4,0.0,2.333333333333333],[8.15,89.35,0.0,2.3499999999999996],[8.200000000000001,89.3,0.0,2.3666666666666667],[8.25,89.25,0.0,2.3833333333333333],[8.3,89.2,0.0,2.4]],\"length\":215,\"width\":4,\"qc\":[1,1,1,1]}]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{wx_url}}/rest/schema/weatherdata/validate",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"schema",
								"weatherdata",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "WeatherAdapterService",
			"item": [
				{
					"name": "FruitWeb/Davis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Data is valid WeatherData\", function(){",
									"    pm.sendRequest(pm.environment.get(\"wx_url\") + \"/rest/schema/weatherdata\",function(err,res){",
									"        var schema = res.json();",
									"        pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "weatherStationId",
									"value": "536",
									"type": "text"
								},
								{
									"key": "interval",
									"value": "3600",
									"type": "text"
								},
								{
									"key": "ignoreErrors",
									"value": "true",
									"type": "text"
								},
								{
									"key": "timeStart",
									"value": "2021-02-01",
									"type": "text"
								},
								{
									"key": "timeEnd",
									"value": "2021-03-01",
									"type": "text"
								},
								{
									"key": "parameters",
									"value": "1002,3002",
									"type": "text"
								},
								{
									"key": "credentials",
									"value": "{\"userName\":\"\",\"password\":\"GF90esoleo\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{wx_url}}/rest/weatheradapter/davisfruitweb",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"weatheradapter",
								"davisfruitweb"
							],
							"query": [
								{
									"key": "weatherStationId",
									"value": "18150029",
									"disabled": true
								},
								{
									"key": "interval",
									"value": "3600",
									"disabled": true
								},
								{
									"key": "ignoreErrors",
									"value": "true",
									"disabled": true
								},
								{
									"key": "timeStart",
									"value": "2021-02-01",
									"disabled": true
								},
								{
									"key": "timeEnd",
									"value": "2021-03-01",
									"disabled": true
								},
								{
									"key": "parameters",
									"value": "1002,3002",
									"disabled": true
								},
								{
									"key": "credentials",
									"value": "{\"username\":\"536\",\"password\":\"GF90esoleo\"}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MeteoBot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Data is valid WeatherData\", function(){",
									"    pm.sendRequest(pm.environment.get(\"wx_url\") + \"/rest/schema/weatherdata\",function(err,res){",
									"        var schema = res.json();",
									"        pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "weatherStationId",
									"value": "18150029",
									"type": "text"
								},
								{
									"key": "interval",
									"value": "3600",
									"type": "text"
								},
								{
									"key": "ignoreErrors",
									"value": "true",
									"type": "text"
								},
								{
									"key": "timeStart",
									"value": "2020-06-12",
									"type": "text"
								},
								{
									"key": "timeEnd",
									"value": "2020-07-03",
									"type": "text"
								},
								{
									"key": "parameters",
									"value": "1002,3002",
									"type": "text"
								},
								{
									"key": "credentials",
									"value": "{\"userName\":\"3138313530303239\",\"password\":\"Y3Nw_48aNe4y1Z0Wj\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{wx_url}}/rest/weatheradapter/meteobot",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"weatheradapter",
								"meteobot"
							],
							"query": [
								{
									"key": "weatherStationId",
									"value": "18150029",
									"disabled": true
								},
								{
									"key": "interval",
									"value": "3600",
									"disabled": true
								},
								{
									"key": "ignoreErrors",
									"value": "true",
									"disabled": true
								},
								{
									"key": "timeStart",
									"value": "2020-06-12",
									"disabled": true
								},
								{
									"key": "timeEnd",
									"value": "2020-07-03",
									"disabled": true
								},
								{
									"key": "parameters",
									"value": "1002,3002",
									"disabled": true
								},
								{
									"key": "credentials",
									"value": "{\"username\":\"3138313530303239\",\"password\":\"Y3Nw_48aNe4y1Z0Wj\"}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Metos (FieldClimate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Data is valid WeatherData\", function(){",
									"    pm.sendRequest(pm.environment.get(\"wx_url\") + \"/rest/schema/weatherdata\",function(err,res){",
									"        var schema = res.json();",
									"        pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "weatherStationId",
									"value": "000012DE",
									"type": "text"
								},
								{
									"key": "interval",
									"value": "3600",
									"type": "text"
								},
								{
									"key": "ignoreErrors",
									"value": "true",
									"type": "text"
								},
								{
									"key": "timeStart",
									"value": "2020-06-12",
									"type": "text"
								},
								{
									"key": "timeEnd",
									"value": "2020-07-03",
									"type": "text"
								},
								{
									"key": "parameters",
									"value": "1002,3002",
									"type": "text"
								},
								{
									"key": "credentials",
									"value": "{\"userName\":\"c511e7d5ddcafe7d49941a016d897f2425c852cba7436cc3\",\"password\":\"3fda3e0ce8c6c768d48b80ace10e544ab282b3965345d81e\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{wx_url}}/rest/weatheradapter/metos",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"weatheradapter",
								"metos"
							],
							"query": [
								{
									"key": "weatherStationId",
									"value": "18150029",
									"disabled": true
								},
								{
									"key": "interval",
									"value": "3600",
									"disabled": true
								},
								{
									"key": "ignoreErrors",
									"value": "true",
									"disabled": true
								},
								{
									"key": "timeStart",
									"value": "2020-06-12",
									"disabled": true
								},
								{
									"key": "timeEnd",
									"value": "2020-07-03",
									"disabled": true
								},
								{
									"key": "parameters",
									"value": "1002,3002",
									"disabled": true
								},
								{
									"key": "credentials",
									"value": "{\"username\":\"3138313530303239\",\"password\":\"Y3Nw_48aNe4y1Z0Wj\"}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FMI (Finnish Meteorological Service)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Data is valid WeatherData\", function(){",
									"    pm.sendRequest(pm.environment.get(\"wx_url\") + \"/rest/schema/weatherdata\",function(err,res){",
									"        var schema = res.json();",
									"        pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{wx_url}}/rest/weatheradapter/fmi?weatherStationId=101104&interval=3600&ignoreErrors=true&timeStart=2020-06-12&timeEnd=2020-07-03&parameters=1002,3002",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"weatheradapter",
								"fmi"
							],
							"query": [
								{
									"key": "weatherStationId",
									"value": "101104"
								},
								{
									"key": "interval",
									"value": "3600"
								},
								{
									"key": "ignoreErrors",
									"value": "true"
								},
								{
									"key": "timeStart",
									"value": "2020-06-12"
								},
								{
									"key": "timeEnd",
									"value": "2020-07-03"
								},
								{
									"key": "parameters",
									"value": "1002,3002"
								},
								{
									"key": "credentials",
									"value": "{\"username\":\"3138313530303239\",\"password\":\"Y3Nw_48aNe4y1Z0Wj\"}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Yr.no (Norwegian Meteorological Service) forecasts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Data is valid WeatherData\", function(){",
									"    pm.sendRequest(pm.environment.get(\"wx_url\") + \"/rest/schema/weatherdata\",function(err,res){",
									"        var schema = res.json();",
									"        pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{wx_url}}/rest/weatheradapter/yr/?longitude=14.3711&latitude=67.2828&altitude=70",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"weatheradapter",
								"yr",
								""
							],
							"query": [
								{
									"key": "longitude",
									"value": "14.3711"
								},
								{
									"key": "latitude",
									"value": "67.2828"
								},
								{
									"key": "altitude",
									"value": "70"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FMI (Finnish Meteorological Service) forecasts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Data is valid WeatherData\", function(){",
									"    pm.sendRequest(pm.environment.get(\"wx_url\") + \"/rest/schema/weatherdata\",function(err,res){",
									"        var schema = res.json();",
									"        pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{wx_url}}/rest/weatheradapter/fmi/forecasts?longitude=14.3711&latitude=67.2828",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"weatheradapter",
								"fmi",
								"forecasts"
							],
							"query": [
								{
									"key": "longitude",
									"value": "14.3711"
								},
								{
									"key": "latitude",
									"value": "67.2828"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "WeatherDataSourceService",
			"item": [
				{
					"name": "List all platform weather data sources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Locationforecast can be found\", function(){",
									"    var dataSourceList = pm.response.json();",
									"    var locationForecastFound = false;",
									"    for(var i=0;i<dataSourceList.length;i++)",
									"    {",
									"        if(dataSourceList[i].name == \"Met Norway Locationforecast\")",
									"        {",
									"            locationForecastFound = true;",
									"        }",
									"    }",
									"    pm.expect(locationForecastFound).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{wx_url}}/rest/weatherdatasource",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"weatherdatasource"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get weather data sources for simple point",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Locationforecast can be found\", function(){",
									"    var dataSourceList = pm.response.json();",
									"    var locationForecastFound = false;",
									"    for(var i=0;i<dataSourceList.length;i++)",
									"    {",
									"        if(dataSourceList[i].name == \"Met Norway Locationforecast\")",
									"        {",
									"            locationForecastFound = true;",
									"        }",
									"    }",
									"    pm.expect(locationForecastFound).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{wx_url}}/rest/weatherdatasource/location/point/?latitude=59.678835236960765&longitude=12.01629638671875",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"weatherdatasource",
								"location",
								"point",
								""
							],
							"query": [
								{
									"key": "latitude",
									"value": "59.678835236960765"
								},
								{
									"key": "longitude",
									"value": "12.01629638671875"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get weather data sources for GeoJson defined point",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Locationforecast can be found\", function(){",
									"    var dataSourceList = pm.response.json();",
									"    var locationForecastFound = false;",
									"    for(var i=0;i<dataSourceList.length;i++)",
									"    {",
									"        if(dataSourceList[i].name == \"Met Norway Locationforecast\")",
									"        {",
									"            locationForecastFound = true;",
									"        }",
									"    }",
									"    pm.expect(locationForecastFound).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"type\": \"FeatureCollection\",\n        \"features\": [\n          {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n              \"type\": \"Point\",\n              \"coordinates\": [\n                12.01629638671875,\n                59.678835236960765\n              ]\n            }\n          }\n        ]\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{wx_url}}/rest/weatherdatasource/location",
							"host": [
								"{{wx_url}}"
							],
							"path": [
								"rest",
								"weatherdatasource",
								"location"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "localhost:8080/VIPSWeatherService"
		}
	]
}